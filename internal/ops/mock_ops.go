// Code generated by MockGen. DO NOT EDIT.
// Source: ops.go

// Package ops is a generated GoMock package.
package ops

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOps is a mock of Ops interface.
type MockOps struct {
	ctrl     *gomock.Controller
	recorder *MockOpsMockRecorder
}

// MockOpsMockRecorder is the mock recorder for MockOps.
type MockOpsMockRecorder struct {
	mock *MockOps
}

// NewMockOps creates a new mock instance.
func NewMockOps(ctrl *gomock.Controller) *MockOps {
	mock := &MockOps{ctrl: ctrl}
	mock.recorder = &MockOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOps) EXPECT() *MockOpsMockRecorder {
	return m.recorder
}

// RunBashInHostNamespace mocks base method.
func (m *MockOps) RunBashInHostNamespace(command string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunBashInHostNamespace", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBashInHostNamespace indicates an expected call of RunBashInHostNamespace.
func (mr *MockOpsMockRecorder) RunBashInHostNamespace(command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBashInHostNamespace", reflect.TypeOf((*MockOps)(nil).RunBashInHostNamespace), varargs...)
}

// RunInHostNamespace mocks base method.
func (m *MockOps) RunInHostNamespace(command string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunInHostNamespace", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInHostNamespace indicates an expected call of RunInHostNamespace.
func (mr *MockOpsMockRecorder) RunInHostNamespace(command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInHostNamespace", reflect.TypeOf((*MockOps)(nil).RunInHostNamespace), varargs...)
}

// SystemctlAction mocks base method.
func (m *MockOps) SystemctlAction(action string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{action}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SystemctlAction", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemctlAction indicates an expected call of SystemctlAction.
func (mr *MockOpsMockRecorder) SystemctlAction(action interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{action}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemctlAction", reflect.TypeOf((*MockOps)(nil).SystemctlAction), varargs...)
}
